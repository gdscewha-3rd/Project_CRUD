let Post,mongoose,Joi;_d9f‍.x([["checkOjectId",()=>checkOjectId],["write",()=>write],["list",()=>list],["read",()=>read],["remove",()=>remove],["update",()=>update]]);_d9f‍.w("../../models/post",[["default",["Post"],function(v){Post=v}]]);_d9f‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_d9f‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);



//id 검증하는 미들웨어 작성
const { ObjectId } = mongoose.Types;

       const checkOjectId = (ctx, next) => {
  const { id } = ctx.params;
  if (!ObjectId.isValid(id)) {
    ctx.status = 404; //Bad Request
    return;
  }
  return next();
};

/*
  POST /api/posts
  {
    title : "제목",
    body : "내용",
    tags : ["태그1","태그2", "태그3"]
  }
*/
       const write = async (ctx) => {
  const schema = Joi.object().keys({
    //객체가 다음 필드 가지고 있음 검증
    title: Joi.string().required(), //required()가 있으면 필수 항목
    body: Joi.string().required(),
    tags: Joi.array().items(Joi.string()).required(), //문자열로 이루어진 배열
  });

  //검증하고 나서 검증 실패인 경우 에러 처리
  const result = schema.validate(ctx.request.body);
  //const result = Joi.validate(ctx.request.body, schema);
  if (result.error) {
    ctx.status = 400; //Bad Request
    ctx.body = result.error;
    return;
  }

  const { title, body, tags } = ctx.request.body;

  const post = new Post({
    //포스트 인스턴스 만들기 위해 new 키워드 사용

    title,
    body,
    tags,
    //생성자 함수 파라미터로 정보 지닌 객체 넣기
  });

  try {
    await post.save();
    //save 함수 실행해 DB에 저장
    //save 함수는 Promise를 반환하기 때문에 async/await 문법 사용
    //데이터베이스 저장 요청 완료할 때까지 await 사용해 대기
    ctx.body = post;
  } catch (e) {
    ctx.throw(500, e);
  }
};

/*
 GET /api/posts
*/

       const list = async (ctx) => {
  //query는 문자열이기 때문에 숫자로 변환해 줘야 함
  //값이 주어지지 않으면 1을 기본으로 사용
  const page = parseInt(ctx.query.page || '1', 10);
  if (page < 1) {
    ctx.status = 400;
    return;
  }
  try {
    const posts = await Post.find()
      .sort({ _id: -1 })
      .limit(10)
      .skip((page - 1) * 10)
      .lean()
      .exec();

    const postCount = await Post.countDocuments().exec();
    ctx.set('Last-Page', Math.ceil(postCount / 10));
    ctx.body = posts.map((post) => ({
      ...post,
      body:
        post.body.length < 200 ? post.body : `${post.body.slice(0, 200)}...`,
    }));
  } catch (e) {
    ctx.throw(500, e);
  }
};

/* 
  GET /api/posts/:id
*/

       const read = async (ctx) => {
  const { id } = ctx.params;
  try {
    const post = await Post.findById(id).exec();
    if (!post) {
      ctx.status = 404;
      return;
    }
    ctx.body = post;
  } catch (e) {
    ctx.throw(500, e);
  }
};

/*
  DELETE /api/posts/:id
*/
       const remove = async (ctx) => {
  const { id } = ctx.params;
  try {
    await Post.findByIdAndRemove(id).exec();
    ctx.status = 204; //No Content (성공하긴 했지만 응답할 데이터 없음)
  } catch (e) {
    ctx.throw(500, e);
  }
};

/*
  PATCH /api/posts/:id
  {
    title : "수정",
    body : "수정 내용",
    tags: ["수정", "태그"]
  }
*/
       const update = async (ctx) => {
  const { id } = ctx.params;
  //write에서 사용한 schema와 비슷한데 required()가 없음!!
  const schema = Joi.object().keys({
    title: Joi.string(),
    body: Joi.string(),
    tags: Joi.array().items(Joi.string()),
  });

  //검증하고 나서 검증 실패인 경우 에러 처리
  const result = schema.validate(ctx.request.body);
  if (result.error) {
    ctx.status = 400; //Bad Request
    ctx.body = result.error;
    return;
  }

  try {
    const post = await Post.findByIdAndUpdate(id, ctx.request.body, {
      new: true,
      //이 값을 설정하면 업데이트된 데이터를 반환함
      //false일 때는 업데이트되기 전의 데이터 반환함
    }).exec();

    if (!post) {
      ctx.status = 404;
      return;
    }
    ctx.body = post;
  } catch (e) {
    ctx.throw(500, e);
  }
};
