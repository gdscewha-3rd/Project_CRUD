let Koa,Router,bodyParser,mongoose,api,jwtMiddleware,createFakeData;_53d‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_53d‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_53d‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_53d‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_53d‍.w("./api",[["default",["api"],function(v){api=v}]]);_53d‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleware"],function(v){jwtMiddleware=v}]]);_53d‍.w("./createFakeData",[["default",["createFakeData"],function(v){createFakeData=v}]]);require('dotenv').config();












//비구조화 할당으로 process.ev 내부 값에 대한 레퍼런스 만들기
const { PORT, MONGO_URL } = process.env;

mongoose
  .connect(MONGO_URL, { useNewUrlParser: true /*, useFindAndModify: false*/ })
  .then(() => {
    console.log('Connected to MongoDB');
    /*createFakeData();*/
  })
  .catch((e) => {
    _53d‍.g.console.error(e);
  });

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes()); // api 라우트 적용

// 라우터 적용 전에 bodyParser 적용
app.use(bodyParser());
app.use(jwtMiddleware);

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

// PORT가 지정되어 있지 않다면 4000을 사용
const port = PORT || 4000;
app.listen(port, () => {
  _53d‍.g.console.log(`Listening to port %d`, port);
});
